From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Mon, 12 Jun 2023 13:45:16 +0400
Subject: [PATCH] Revert-changes-in-NewChunkHolder


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index c2ba0ae1fe5ec3ff53343a1b38b8fe5dc2b547c9..03d902afc0702770e05614f6a7a629dab72605cc 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1753,8 +1753,7 @@ public final class NewChunkHolder {
     public static final record SaveStat(boolean savedChunk, boolean savedEntityChunk, boolean savedPoiChunk) {}
 
     public SaveStat save(final boolean shutdown, final boolean unloading) {
-        CompletableFuture<SaveStat> future = new CompletableFuture<>();
-        RegionizedServer.getInstance().taskQueue.queueTickTaskQueue(this.world, this.chunkX, this.chunkZ, () -> {
+        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main");
         ChunkAccess chunk = this.getCurrentChunk();
         PoiChunk poi = this.getPoiChunk();
         ChunkEntitySlices entities = this.getEntityChunk();
@@ -1779,7 +1778,7 @@ public final class NewChunkHolder {
         }
 
         boolean canSaveChunk = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) &&
-                 (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
+                                            (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
         boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
         boolean canSaveEntities = entities != null;
 
@@ -1799,14 +1798,7 @@ public final class NewChunkHolder {
             }
         }
 
-        SaveStat saveStat = executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
-            future.complete(saveStat);
-            }, PrioritisedExecutor.Priority.HIGHEST);
-        try {
-            return future.get();
-        } catch (InterruptedException | ExecutionException e) {
-            throw new RuntimeException(e);
-        }
+        return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
     }
 
     static final class AsyncChunkSerializeTask implements Runnable {
