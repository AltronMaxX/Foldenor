From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Mon, 12 Jun 2023 10:36:23 +0400
Subject: [PATCH] Redirect-Bukkit-scheduler-to-Folia-scheduler


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index 08075b8895f816420c2a940bf551dfada3c0cd9e..792e7ad4eb86f78e87795b26521953fa620ca863 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -42,8 +42,12 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
+import io.papermc.paper.threadedregions.TickRegionScheduler;
+import io.papermc.paper.threadedregions.RegionizedServer;
 
 public final class NewChunkHolder {
 
@@ -1749,8 +1753,8 @@ public final class NewChunkHolder {
     public static final record SaveStat(boolean savedChunk, boolean savedEntityChunk, boolean savedPoiChunk) {}
 
     public SaveStat save(final boolean shutdown, final boolean unloading) {
-        TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot save data off-main");
-
+        CompletableFuture<SaveStat> future = new CompletableFuture<>();
+        RegionizedServer.getInstance().taskQueue.queueTickTaskQueue(this.world, this.chunkX, this.chunkZ, () -> {
         ChunkAccess chunk = this.getCurrentChunk();
         PoiChunk poi = this.getPoiChunk();
         ChunkEntitySlices entities = this.getEntityChunk();
@@ -1775,7 +1779,7 @@ public final class NewChunkHolder {
         }
 
         boolean canSaveChunk = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) &&
-                                (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
+                 (chunk != null && ((shutdown || chunk instanceof LevelChunk) && chunk.isUnsaved()));
         boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
         boolean canSaveEntities = entities != null;
 
@@ -1795,7 +1799,14 @@ public final class NewChunkHolder {
             }
         }
 
-        return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
+        SaveStat saveStat = executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
+            future.complete(saveStat);
+            }, PrioritisedExecutor.Priority.HIGHEST);
+        try {
+            return future.get();
+        } catch (InterruptedException | ExecutionException e) {
+            throw new RuntimeException(e);
+        }
     }
 
     static final class AsyncChunkSerializeTask implements Runnable {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index bcb85a4253b5e44b78cbadfb16c3bf0d47d7369e..17a2967e06c2b8a9795f63799d5ccc2160181975 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -7,6 +7,8 @@ import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ExecutionException;
+
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -578,9 +580,9 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public boolean teleport(Location location, TeleportCause cause, io.papermc.paper.entity.TeleportFlag... flags) {
         // Folia start - region threading
-        if (true) {
-            throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
-        }
+        //if (true) {
+            //throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
+        //}
         // Folia end - region threading
         // Paper end
         Preconditions.checkArgument(location != null, "location cannot be null");
@@ -608,19 +610,18 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         if (dismount) this.entity.stopRiding(); // Paper - Teleport passenger API
 
         // Let the server handle cross world teleports
-        if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
-            // Prevent teleportation to an other world during world generation
-            Preconditions.checkState(!entity.generation, "Cannot teleport entity to an other world during world generation");
-            this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toPosition(location));
-            return true;
+        try {
+            return teleportAsync(location, cause).get();
+        } catch (InterruptedException | ExecutionException e) {
+            throw new RuntimeException(e);
         }
 
         // entity.setLocation() throws no event, and so cannot be cancelled
-        entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
+        //entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
         // SPIGOT-619: Force sync head rotation also
-        this.entity.setYHeadRot(location.getYaw());
+        //this.entity.setYHeadRot(location.getYaw());
 
-        return true;
+        //return true;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index eb84a8dd97f92de4a7dd3826d9e124a442cba565..a5b9b1b8391db7992a310eece9d7608786923f57 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -8,11 +8,7 @@ import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.PriorityQueue;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
@@ -24,6 +20,8 @@ import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scheduler.BukkitTask;
 import org.bukkit.scheduler.BukkitWorker;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import org.bukkit.Bukkit;
 
 /**
  * The fundamental concepts for this implementation:
@@ -530,15 +528,35 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     protected CraftTask handle(final CraftTask task, final long delay) { // Paper
-        if (true) throw new UnsupportedOperationException(); // Folia - region threading
+        //if (true) throw new UnsupportedOperationException(); // Folia - region threading
         // Paper start
         if (!this.isAsyncScheduler && !task.isSync()) {
-            this.asyncScheduler.handle(task, delay);
+            long mdelay = (long) (delay / 20.0 * 1000.0);
+            ScheduledTask scheduledTask;
+            if (mdelay <= 0) {
+                scheduledTask = Bukkit.getAsyncScheduler().runNow(task.getOwner(), stask -> {
+                    task.run();
+                });
+            } else {
+                 scheduledTask = Bukkit.getAsyncScheduler().runDelayed(task.getOwner(), stask -> {
+                     task.run();
+                 }, mdelay, TimeUnit.MILLISECONDS);
+            }
+            task.setScheduledTask(scheduledTask);
             return task;
         }
         // Paper end
-        task.setNextRun(this.currentTick + delay);
-        this.addTask(task);
+        ScheduledTask scheduledTask;
+        if (delay <= 0) {
+            scheduledTask = Bukkit.getGlobalRegionScheduler().run(task.getOwner(), stask -> {
+                task.run();
+            });
+        } else {
+            scheduledTask = Bukkit.getGlobalRegionScheduler().runDelayed(task.getOwner(), stask -> {
+                task.run();
+            }, delay);
+        }
+        task.setScheduledTask(scheduledTask);
         return task;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 3f45bab0e9f7b3697e6d9d1092a1e6e579f7066f..17d9bd6f8ce3ea8dc757d48d301661767b99922f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -6,6 +6,7 @@ import co.aikar.timings.NullTimingHandler;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 
 import org.spigotmc.CustomTimingsHandler; // Spigot
 import co.aikar.timings.MinecraftTimings; // Paper
@@ -35,6 +36,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private final Plugin plugin;
     private final int id;
     private final long createdAt = System.nanoTime();
+    private ScheduledTask scheduledTask;
 
     CraftTask() {
         this(null, null, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
@@ -139,12 +141,16 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public boolean isCancelled() {
-        return (this.period == CraftTask.CANCEL);
+        return scheduledTask.isCancelled();
     }
 
     @Override
     public void cancel() {
-        Bukkit.getScheduler().cancelTask(id);
+        scheduledTask.cancel();
+    }
+
+    protected void setScheduledTask(ScheduledTask scheduledTask) {
+        this.scheduledTask = scheduledTask;
     }
 
     /**
