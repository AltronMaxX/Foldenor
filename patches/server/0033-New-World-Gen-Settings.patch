From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Mon, 12 Jun 2023 14:35:15 +0400
Subject: [PATCH] New-World-Gen-Settings


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a2ea52266d72bbe445bb843eeb3b3edee548062c..c6f1db10b124ef2814574c25a0bc0a35174fe72d 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -57,7 +57,6 @@ import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
-import net.minecraft.world.level.levelgen.WorldOptions;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import net.minecraft.world.level.storage.*;
 import org.slf4j.Logger;
@@ -275,7 +274,7 @@ public class Main {
                 }).get();
             } catch (Exception exception) {
                 Main.LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", exception);
-                //return;
+                return;
             }
 
             /*
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..b2cc28c1e18ef349ee1de1b7e74d695a1e791261
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/levelgen/NewWorldGenSettings.java
@@ -0,0 +1,22 @@
+package net.minecraft.world.level.levelgen;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.DataResult;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.registries.Registries;
+
+public record NewWorldGenSettings(NewWorldOptions options, WorldDimensions dimensions) {
+    public static final Codec<NewWorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> {
+        return instance.group(NewWorldOptions.CODEC.forGetter(NewWorldGenSettings::options), WorldDimensions.CODEC.forGetter(NewWorldGenSettings::dimensions)).apply(instance, instance.stable(NewWorldGenSettings::new));
+    });
+
+    public static <T> DataResult<T> encode(DynamicOps<T> registryOps, NewWorldOptions generatorOptions, WorldDimensions dimensionOptionsRegistryHolder) {
+        return CODEC.encodeStart(registryOps, new NewWorldGenSettings(generatorOptions, dimensionOptionsRegistryHolder));
+    }
+
+    public static <T> DataResult<T> encode(DynamicOps<T> registryOps, NewWorldOptions generatorOptions, RegistryAccess dynamicRegistryManager) {
+        return encode(registryOps, generatorOptions, new WorldDimensions(dynamicRegistryManager.registryOrThrow(Registries.LEVEL_STEM)));
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 05ef47dfb775ff2197905c57044c826c40d9c606..aba29a5e8de1a15bafd12b72ba8008118875db0d 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -65,6 +65,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.dimension.LevelStem;
+import net.minecraft.world.level.levelgen.NewWorldGenSettings;
 import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
@@ -141,8 +142,8 @@ public class LevelStorageSource {
         return new LevelStorageSource(path, path.resolve("../backups"), directoryvalidator, DataFixers.getDataFixer());
     }
 
-    private static <T> DataResult<WorldGenSettings> readWorldGenSettings(Dynamic<T> levelData, DataFixer dataFixer, int version) {
-        Dynamic<T> dynamic1 = levelData.get("WorldGenSettings").orElseEmptyMap();
+    private static <T> DataResult<NewWorldGenSettings> readWorldGenSettings(Dynamic<T> levelData, DataFixer dataFixer, int version) {
+        Dynamic<T> dynamic1 = levelData.get("NewWorldGenSettings").orElseEmptyMap();
         UnmodifiableIterator unmodifiableiterator = LevelStorageSource.OLD_SETTINGS_KEYS.iterator();
 
         while (unmodifiableiterator.hasNext()) {
@@ -156,7 +157,7 @@ public class LevelStorageSource {
 
         Dynamic<T> dynamic2 = DataFixTypes.WORLD_GEN_SETTINGS.updateToCurrentVersion(dataFixer, dynamic1, version);
 
-        return WorldGenSettings.CODEC.parse(dynamic2);
+        return NewWorldGenSettings.CODEC.parse(dynamic2);
     }
 
     private static WorldDataConfiguration readDataConfig(Dynamic<?> dynamic) {
@@ -314,12 +315,12 @@ public class LevelStorageSource {
             Logger logger = LevelStorageSource.LOGGER;
 
             Objects.requireNonNull(logger);
-            WorldGenSettings generatorsettings = (WorldGenSettings) dataresult.getOrThrow(false, Util.prefix("WorldGenSettings: ", logger::error));
+            NewWorldGenSettings generatorsettings = (NewWorldGenSettings) dataresult.getOrThrow(false, Util.prefix("NewWorldGenSettings: ", logger::error));
             LevelVersion levelversion = LevelVersion.parse(dynamic);
             LevelSettings worldsettings = LevelSettings.parse(dynamic, dataConfiguration);
             WorldDimensions.Complete worlddimensions_b = generatorsettings.dimensions().bake(dimensionOptionsRegistry);
             Lifecycle lifecycle1 = worlddimensions_b.lifecycle().add(lifecycle);
-            PrimaryLevelData worlddataserver = PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, worlddimensions_b.specialWorldProperty(), (NewWorldOptions) generatorsettings.options(), lifecycle1);
+            PrimaryLevelData worlddataserver = PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, worlddimensions_b.specialWorldProperty(), generatorsettings.options(), lifecycle1);
             worlddataserver.pdc = nbttagcompound1.get("BukkitValues"); // CraftBukkit - Add PDC to world
 
             return Pair.of(worlddataserver, worlddimensions_b);
@@ -382,7 +383,7 @@ public class LevelStorageSource {
 
     @Nullable
     private static Tag readLightweightData(Path path) throws IOException {
-        SkipFields skipfields = new SkipFields(new FieldSelector[]{new FieldSelector("Data", CompoundTag.TYPE, "Player"), new FieldSelector("Data", CompoundTag.TYPE, "WorldGenSettings")});
+        SkipFields skipfields = new SkipFields(new FieldSelector[]{new FieldSelector("Data", CompoundTag.TYPE, "Player"), new FieldSelector("Data", CompoundTag.TYPE, "NewWorldGenSettings")});
 
         NbtIo.parseCompressed(path.toFile(), skipfields);
         return skipfields.getResult();
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index bbe0898924bded4c1e3591a4162969c975d8998e..f4bc076b209fb5e85a0ac670e0d0463a5740c632 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -37,6 +37,7 @@ import net.minecraft.world.level.WorldDataConfiguration;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
+import net.minecraft.world.level.levelgen.NewWorldGenSettings;
 import net.minecraft.world.level.levelgen.NewWorldOptions;
 import net.minecraft.world.level.timers.TimerCallbacks;
 import net.minecraft.world.level.timers.TimerQueue;
@@ -60,7 +61,7 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     protected static final String PLAYER = "Player";
-    protected static final String WORLD_GEN_SETTINGS = "WorldGenSettings";
+    protected static final String WORLD_GEN_SETTINGS = "NewWorldGenSettings";
     public LevelSettings settings;
     private final NewWorldOptions worldOptions;
     private final PrimaryLevelData.SpecialWorldProperty specialWorldProperty;
@@ -214,12 +215,12 @@ public class PrimaryLevelData implements ServerLevelData, NewWorldData {
         levelNbt.put("Version", nbttagcompound2);
         NbtUtils.addCurrentDataVersion(levelNbt);
         DynamicOps<Tag> dynamicops = RegistryOps.create(NbtOps.INSTANCE, (HolderLookup.Provider) registryManager);
-        DataResult<Tag> dataresult = WorldGenSettings.encode(dynamicops, this.worldOptions, new WorldDimensions(this.customDimensions != null ? this.customDimensions : registryManager.registryOrThrow(Registries.LEVEL_STEM))); // CraftBukkit
+        DataResult<Tag> dataresult = NewWorldGenSettings.encode(dynamicops, this.worldOptions, new WorldDimensions(this.customDimensions != null ? this.customDimensions : registryManager.registryOrThrow(Registries.LEVEL_STEM))); // CraftBukkit
         Logger logger = PrimaryLevelData.LOGGER;
 
         Objects.requireNonNull(logger);
         dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).ifPresent((nbtbase) -> {
-            levelNbt.put("WorldGenSettings", nbtbase);
+            levelNbt.put("NewWorldGenSettings", nbtbase);
         });
         levelNbt.putInt("GameType", this.settings.gameType().getId());
         levelNbt.putInt("SpawnX", this.xSpawn);
